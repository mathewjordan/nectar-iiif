{
  "version": 3,
  "sources": ["../src/components/Homepage/Homepage.tsx", "../src/stitches.tsx", "../src/hooks/useGetLabel.ts", "../src/services/html-element.ts", "../src/components/Label/Label.tsx", "../src/components/Metadata/Metadata.tsx", "../src/components/Metadata/Item.tsx", "../src/components/Value/Value.tsx", "../src/components/Markup/Markup.tsx", "../src/components/RequiredStatement/RequiredStatement.tsx", "../src/components/SeeAlso/SeeAlso.tsx", "../src/components/Summary/Summary.tsx", "../src/components/Thumbnail/Thumbnail.tsx", "../src/components/ContentResource/ContentResources.tsx", "../src/hooks/useGetImageResource.ts"],
  "sourcesContent": ["import React from \"react\";\nimport { styled } from \"stitches\";\nimport { useGetLabel } from \"hooks/useGetLabel\";\nimport { NectarHomepage } from \"types/nectar\";\nimport { sanitizeAttributes } from \"services/html-element\";\n\nconst StyledHomepage = styled(\"a\", {});\n\nconst Homepage: React.FC<NectarHomepage> = (props) => {\n  const { children, homepage } = props;\n\n  /**\n   * Create attributes and remove React props\n   */\n  const remove = [\"children\", \"homepage\"];\n  const attributes = sanitizeAttributes(props, remove);\n\n  return (\n    <>\n      {homepage &&\n        homepage.map((resource) => {\n          const label = useGetLabel(resource.label, attributes.lang) as string;\n          return (\n            <StyledHomepage\n              aria-label={children ? label : undefined}\n              href={resource.id}\n              key={resource.id}\n              {...attributes}\n            >\n              {children ? children : label}\n            </StyledHomepage>\n          );\n        })}\n    </>\n  );\n};\n\nexport default Homepage;\n", "import { createStitches } from \"@stitches/react\";\n\nexport const { styled, css, keyframes } = createStitches({\n  prefix: \"nectar\",\n});\n", "import { InternationalString } from \"@iiif/presentation-3\";\n\nexport const useGetLabel = (\n  label: InternationalString,\n  lang: string = \"none\"\n) => {\n  /*\n   * If no label exists, return an empty string.\n   */\n  if (!label) return null;\n\n  /*\n   * If label is not a IIIF Presentation API 3.0 shape, return the string\n   */\n  if (typeof label === \"string\") return [label];\n\n  /*\n   * If InternationalString code does not exist on label, then\n   * return what may be there, ex: label.none[0] OR label.fr[0]\n   */\n  if (!label[lang]) {\n    const codes: Array<string> = Object.getOwnPropertyNames(label);\n    if (codes.length > 0) return label[codes[0]]?.join(\", \");\n  }\n\n  /*\n   * Return label value for InternationalString code `en`\n   */\n  if (!label[lang]) return null;\n  if (!Array.isArray(label[lang])) return null;\n\n  const entries = label[lang] as string[];\n\n  return entries.join(\", \");\n};\n", "import sanitizeHtml from \"sanitize-html\";\n\nfunction createMarkup(html: string) {\n  return { __html: sanitizeHTML(html) };\n}\n\nfunction sanitizeAttributes(props: any, remove: string[]) {\n  const entries = Object.keys(props).filter((key) =>\n    !remove.includes(key) ? key : null\n  );\n\n  let attributes: any = new Object();\n  entries.forEach((key) => {\n    attributes[key] = props[key];\n  });\n\n  return attributes as React.HTMLAttributes<HTMLElement>;\n}\n\nfunction sanitizeHTML(html: string) {\n  return sanitizeHtml(html, {\n    allowedAttributes: {\n      a: [\"href\"],\n      img: [\"alt\", \"src\"],\n    },\n    allowedSchemes: [\"http\", \"https\", \"mailto\"],\n    allowedTags: [\n      \"a\",\n      \"b\",\n      \"br\",\n      \"i\",\n      \"img\",\n      \"p\",\n      \"small\",\n      \"span\",\n      \"sub\",\n      \"sup\",\n    ],\n  });\n}\n\nexport { createMarkup, sanitizeAttributes, sanitizeHTML };\n", "import React from \"react\";\nimport { styled } from \"stitches\";\nimport { useGetLabel } from \"hooks/useGetLabel\";\nimport { NectarLabel } from \"types/nectar\";\nimport { sanitizeAttributes } from \"services/html-element\";\n\nconst StyledLabel = styled(\"span\", {});\n\nconst Label: React.FC<NectarLabel> = (props) => {\n  const { as, label } = props;\n\n  /**\n   * Create attributes and remove React props\n   */\n  const remove = [\"as\", \"label\"];\n  let attributes = sanitizeAttributes(props, remove);\n\n  return (\n    <StyledLabel as={as} {...attributes}>\n      {useGetLabel(label, attributes.lang as string) as string}\n    </StyledLabel>\n  );\n};\n\nexport default Label;\n", "import React from \"react\";\nimport { styled } from \"stitches\";\nimport MetadataItem from \"./Item\";\nimport { NectarMetadata } from \"types/nectar\";\nimport { sanitizeAttributes } from \"services/html-element\";\n\nconst StyledMetadata = styled(\"dl\", {});\n\nconst Metadata: React.FC<NectarMetadata> = (props) => {\n  const { as, metadata } = props;\n\n  if (!Array.isArray(metadata)) return <></>;\n\n  /**\n   * Create attributes and remove React props\n   */\n  const remove = [\"as\", \"metadata\"];\n  let attributes = sanitizeAttributes(props, remove);\n\n  return (\n    <>\n      {metadata.length > 0 && (\n        <StyledMetadata as={as} {...attributes}>\n          {metadata.map((item, index) => {\n            return (\n              <MetadataItem item={item} key={index} lang={attributes.lang} />\n            );\n          })}\n        </StyledMetadata>\n      )}\n    </>\n  );\n};\n\nexport default Metadata;\n", "import React from \"react\";\nimport Label from \"components/Label/Label\";\nimport Value from \"components/Value/Value\";\nimport { NectarMetadataItem } from \"types/nectar\";\n\nconst MetadataItem: React.FC<NectarMetadataItem> = (props) => {\n  const { item, lang } = props;\n  const { label, value } = item;\n  return (\n    <div role=\"group\">\n      <Label as=\"dt\" label={label} lang={lang} />\n      <Value as=\"dd\" value={value} lang={lang} />\n    </div>\n  );\n};\n\nexport default MetadataItem;\n", "import React from \"react\";\nimport { NectarValue } from \"types/nectar\";\nimport Markup from \"components/Markup/Markup\";\n\nconst Value: React.FC<NectarValue> = ({ as = \"dd\", lang, value }) => (\n  <Markup markup={value} as={as} lang={lang} />\n);\n\nexport default Value;\n", "import React from \"react\";\nimport { styled } from \"stitches\";\nimport { useGetLabel } from \"hooks/useGetLabel\";\nimport { NectarMarkup } from \"types/nectar\";\nimport { createMarkup, sanitizeAttributes } from \"services/html-element\";\n\nconst StyledMarkup = styled(\"span\", {});\n\nconst Markup: React.FC<NectarMarkup> = (props) => {\n  const { as, markup } = props;\n\n  if (!markup) return <></>;\n\n  /**\n   * Create attributes and remove React props\n   */\n  const remove = [\"as\", \"markup\"];\n  let attributes = sanitizeAttributes(props, remove);\n\n  const html = createMarkup(\n    useGetLabel(markup, attributes.lang as string) as string\n  );\n\n  return (\n    <StyledMarkup as={as} {...attributes} dangerouslySetInnerHTML={html} />\n  );\n};\n\nexport default Markup;\n", "import React from \"react\";\nimport { styled } from \"stitches\";\nimport MetadataItem from \"components/Metadata/Item\";\nimport { NectarRequiredStatement } from \"types/nectar\";\nimport { sanitizeAttributes } from \"services/html-element\";\n\nconst StyledRequiredStatement = styled(\"dl\", {});\n\nconst RequiredStatement: React.FC<NectarRequiredStatement> = (props) => {\n  const { as, requiredStatement } = props;\n\n  if (!requiredStatement) return <></>;\n\n  /**\n   * Create attributes and remove React props\n   */\n  const remove = [\"as\", \"requiredStatement\"];\n  let attributes = sanitizeAttributes(props, remove);\n\n  return (\n    <StyledRequiredStatement as={as} {...attributes}>\n      <MetadataItem item={requiredStatement} lang={attributes.lang} />\n    </StyledRequiredStatement>\n  );\n};\n\nexport default RequiredStatement;\n", "import React from \"react\";\nimport { styled } from \"stitches\";\nimport { useGetLabel } from \"hooks/useGetLabel\";\nimport { NectarSeeAlso } from \"types/nectar\";\nimport { sanitizeAttributes } from \"services/html-element\";\n\nconst StyledSeeAlso = styled(\"li\", {});\nconst StyledWrapper = styled(\"ul\", {});\n\nconst SeeAlso: React.FC<NectarSeeAlso> = (props) => {\n  const { as, seeAlso } = props;\n\n  /**\n   * Create attributes and remove React props\n   */\n  const remove = [\"as\", \"seeAlso\"];\n  const attributes = sanitizeAttributes(props, remove);\n\n  return (\n    <StyledWrapper as={as}>\n      {seeAlso &&\n        seeAlso.map((resource) => {\n          const label = useGetLabel(resource.label, attributes.lang) as string;\n          return (\n            <StyledSeeAlso key={resource.id}>\n              <a href={resource.id} {...attributes}>\n                {label ? label : resource.id}\n              </a>\n            </StyledSeeAlso>\n          );\n        })}\n    </StyledWrapper>\n  );\n};\n\nexport default SeeAlso;\n", "import React from \"react\";\nimport { NectarSummary } from \"types/nectar\";\nimport { sanitizeAttributes } from \"services/html-element\";\nimport Markup from \"components/Markup/Markup\";\n\nconst Summary: React.FC<NectarSummary> = (props) => {\n  const { as, summary } = props;\n\n  /**\n   * Create attributes and remove React props\n   */\n  const remove = [\"as\", \"summary\"];\n  let attributes = sanitizeAttributes(props, remove);\n\n  return <Markup as={as} markup={summary} {...attributes} />;\n};\n\nexport default Summary;\n", "import React from \"react\";\nimport { NectarExternalWebResource, NectarThumbnail } from \"types/nectar\";\nimport { sanitizeAttributes } from \"services/html-element\";\nimport ContentResource from \"components/ContentResource/ContentResources\";\n\nconst Thumbnail: React.FC<NectarThumbnail> = (props) => {\n  const { thumbnail } = props;\n\n  /**\n   * Create attributes and remove React props\n   */\n  const remove = [\"thumbnail\"];\n  const attributes = sanitizeAttributes(props, remove);\n\n  return (\n    <>\n      {thumbnail &&\n        thumbnail.map((contentResource) => (\n          <ContentResource\n            contentResource={contentResource as NectarExternalWebResource}\n            key={contentResource.id}\n            {...attributes}\n          />\n        ))}\n    </>\n  );\n};\n\nexport default Thumbnail;\n", "import React, { useEffect, useRef } from \"react\";\nimport { styled } from \"stitches\";\nimport Hls from \"hls.js\";\nimport { useGetImageResource } from \"hooks/useGetImageResource\";\nimport { sanitizeAttributes } from \"services/html-element\";\nimport { useGetLabel } from \"hooks/useGetLabel\";\nimport { NectarContentResource } from \"types/nectar\";\n\nconst StyledResource = styled(\"img\", { objectFit: \"cover\" });\n\nconst ContentResource: React.FC<NectarContentResource> = (props) => {\n  const mediaRef = useRef(null);\n  const { contentResource, altAsLabel } = props;\n\n  let alt: string | undefined;\n  if (altAsLabel) alt = useGetLabel(altAsLabel) as string;\n\n  /**\n   * Create attributes and remove React props\n   */\n  const remove = [\"contentResource\", \"altAsLabel\"];\n  const attributes = sanitizeAttributes(props, remove);\n\n  const { type, id, width = 200, height, format, duration } = contentResource;\n\n  useEffect(() => {\n    /**\n     * Check that IIIF content resource ID exists and\n     * we have a reffed <video> for attaching HLS\n     */\n    if (!id && !mediaRef.current) return;\n    if ([\"Image\"].includes(type)) return;\n\n    /**\n     * Eject HLS attachment if file extension from\n     * the IIIF content resource ID is not .m3u8\n     */\n    if (!id.includes(\"m3u8\")) return;\n\n    // Bind hls.js package to our <video /> element and then load the media source\n    const hls = new Hls();\n\n    if (mediaRef.current) {\n      hls.attachMedia(mediaRef.current);\n      hls.on(Hls.Events.MEDIA_ATTACHED, function () {\n        hls.loadSource(id as string);\n      });\n    }\n\n    // Handle errors\n    hls.on(Hls.Events.ERROR, function (event, data) {\n      if (data.fatal) {\n        switch (data.type) {\n          case Hls.ErrorTypes.NETWORK_ERROR:\n            // try to recover network error\n            console.error(\n              `fatal ${event} network error encountered, try to recover`\n            );\n            hls.startLoad();\n            break;\n          case Hls.ErrorTypes.MEDIA_ERROR:\n            console.error(\n              `fatal ${event} media error encountered, try to recover`\n            );\n            hls.recoverMediaError();\n            break;\n          default:\n            // cannot recover\n            hls.destroy();\n            break;\n        }\n      }\n    });\n\n    return () => {\n      if (hls) {\n        hls.detachMedia();\n        hls.destroy();\n      }\n    };\n  }, []);\n\n  useEffect(() => playLoop(), []);\n\n  const playLoop = () => {\n    if (!mediaRef.current) return;\n\n    let startTime = 0;\n    let loopTime = 30;\n\n    if (duration) loopTime = duration;\n    if (!id.split(\"#t=\") && duration) startTime = duration * 0.1;\n\n    if (id.split(\"#t=\").pop()) {\n      const fragment = id.split(\"#t=\").pop();\n      if (fragment) startTime = parseInt(fragment.split(\",\")[0]);\n    }\n\n    const media: HTMLVideoElement = mediaRef.current;\n    media.currentTime = startTime;\n    media.play();\n\n    setTimeout(() => playLoop(), loopTime * 1000);\n  };\n\n  switch (type) {\n    case \"Image\":\n      const src = useGetImageResource(contentResource);\n      return (\n        <StyledResource\n          as=\"img\"\n          alt={alt}\n          css={{ width: width, height: height }}\n          key={id}\n          src={src}\n          {...attributes}\n        />\n      );\n\n    case \"Video\":\n      return (\n        <StyledResource\n          as=\"video\"\n          css={{ width: width, height: height }}\n          disablePictureInPicture\n          key={id}\n          loop\n          muted\n          onPause={playLoop}\n          ref={mediaRef}\n          src={id}\n        />\n      );\n\n    default:\n      console.warn(\n        `Resource type: ${type} is not valid or not yet supported in Nectar.`\n      );\n      return <></>;\n  }\n};\n\nexport default ContentResource;\n", "import { IIIFExternalWebResource, ImageService } from \"@iiif/presentation-3\";\n\nexport const useGetImageResource = (\n  resource: IIIFExternalWebResource,\n  size: string = \"200,\",\n  region: string = \"full\"\n) => {\n  /**\n   * defenseively ensure resource is not an array\n   */\n  if (Array.isArray(resource)) resource = resource[0];\n\n  const { id, service } = resource;\n\n  let imageService: ImageService | undefined;\n\n  /**\n   * return resource id if service does not exist\n   */\n  if (!service) return id;\n\n  if (Array.isArray(resource.service) && resource.service.length > 0)\n    imageService = service[0] as ImageService;\n\n  if (imageService) {\n    if (imageService[\"@id\"])\n      return `${imageService[\"@id\"]}/${region}/${size}/0/default.jpg`;\n\n    if (imageService.id)\n      return `${imageService.id}/${region}/${size}/0/default.jpg`;\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
